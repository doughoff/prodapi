// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: copyfrom.go

package postgres

import (
	"context"
)

// iteratorForCreateProductionOrderCycles implements pgx.CopyFromSource.
type iteratorForCreateProductionOrderCycles struct {
	rows                 []*CreateProductionOrderCyclesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateProductionOrderCycles) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateProductionOrderCycles) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Factor,
		r.rows[0].ProductionOrderID,
		r.rows[0].CycleOrder,
	}, nil
}

func (r iteratorForCreateProductionOrderCycles) Err() error {
	return nil
}

func (q *Queries) CreateProductionOrderCycles(ctx context.Context, db DBTX, arg []*CreateProductionOrderCyclesParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"production_order_cycles"}, []string{"factor", "production_order_id", "cycle_order"}, &iteratorForCreateProductionOrderCycles{rows: arg})
}

// iteratorForCreateRecipeIngredients implements pgx.CopyFromSource.
type iteratorForCreateRecipeIngredients struct {
	rows                 []*CreateRecipeIngredientsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateRecipeIngredients) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateRecipeIngredients) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RecipeID,
		r.rows[0].ProductID,
		r.rows[0].Quantity,
	}, nil
}

func (r iteratorForCreateRecipeIngredients) Err() error {
	return nil
}

func (q *Queries) CreateRecipeIngredients(ctx context.Context, db DBTX, arg []*CreateRecipeIngredientsParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"recipe_ingredients"}, []string{"recipe_id", "product_id", "quantity"}, &iteratorForCreateRecipeIngredients{rows: arg})
}

// iteratorForCreateStockMovementItems implements pgx.CopyFromSource.
type iteratorForCreateStockMovementItems struct {
	rows                 []*CreateStockMovementItemsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateStockMovementItems) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateStockMovementItems) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].StockMovementID,
		r.rows[0].ProductID,
		r.rows[0].Quantity,
		r.rows[0].Price,
		r.rows[0].Batch,
	}, nil
}

func (r iteratorForCreateStockMovementItems) Err() error {
	return nil
}

func (q *Queries) CreateStockMovementItems(ctx context.Context, db DBTX, arg []*CreateStockMovementItemsParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"stock_movement_items"}, []string{"stock_movement_id", "product_id", "quantity", "price", "batch"}, &iteratorForCreateStockMovementItems{rows: arg})
}
